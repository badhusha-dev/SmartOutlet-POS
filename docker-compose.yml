version: '3.8'

services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: smartoutlet-mysql
    environment:
      MYSQL_ROOT_PASSWORD: smartoutlet123
      MYSQL_DATABASE: smartoutlet_auth
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: smartoutlet-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - smartoutlet-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: smartoutlet-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - smartoutlet-network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: smartoutlet-redis
    ports:
      - "6379:6379"
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: smartoutlet-auth-service
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/smartoutlet_auth?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
    networks:
      - smartoutlet-network
    restart: unless-stopped

  # Outlet Service
  outlet-service:
    build:
      context: ./backend/outlet-service
      dockerfile: Dockerfile
    container_name: smartoutlet-outlet-service
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/smartoutlet_outlet?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - smartoutlet-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    container_name: smartoutlet-product-service
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/smartoutlet_product?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - smartoutlet-network
    restart: unless-stopped

  # POS Service
  pos-service:
    build:
      context: ./backend/pos-service
      dockerfile: Dockerfile
    container_name: smartoutlet-pos-service
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/smartoutlet_pos?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - smartoutlet-network
    restart: unless-stopped

  # Expense Service
  expense-service:
    build:
      context: ./backend/expense-service
      dockerfile: Dockerfile
    container_name: smartoutlet-expense-service
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/smartoutlet_expense?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - smartoutlet-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smartoutlet-frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_AUTH_SERVICE_URL: http://localhost:8081
      REACT_APP_OUTLET_SERVICE_URL: http://localhost:8082
      REACT_APP_PRODUCT_SERVICE_URL: http://localhost:8083
      REACT_APP_POS_SERVICE_URL: http://localhost:8084
      REACT_APP_EXPENSE_SERVICE_URL: http://localhost:8085
    networks:
      - smartoutlet-network
    restart: unless-stopped

volumes:
  mysql_data:

networks:
  smartoutlet-network:
    driver: bridge