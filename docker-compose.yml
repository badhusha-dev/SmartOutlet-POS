version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: smartoutlet-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: smartoutlet_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: smartoutlet123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 60s

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: smartoutlet-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: smartoutlet-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: smartoutlet-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass smartoutlet123
    volumes:
      - redis_data:/data
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: smartoutlet-auth-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smartoutlet_auth
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: smartoutlet123
      APP_JWT_SECRET: smartoutletSecretKeyForJWTTokenGenerationThatShouldBeLongEnoughForSecurityInDockerEnvironment
      APP_JWT_EXPIRATION: 86400000
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/auth/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Outlet Service
  outlet-service:
    build:
      context: ./backend/outlet-service
      dockerfile: Dockerfile
    container_name: smartoutlet-outlet-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smartoutlet_outlet
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: smartoutlet123
      AUTH_SERVICE_URL: http://auth-service:8081
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/outlets/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    container_name: smartoutlet-product-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smartoutlet_product
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: smartoutlet123
      AUTH_SERVICE_URL: http://auth-service:8081
      APP_PRODUCT_LOW_STOCK_THRESHOLD: 10
      APP_PRODUCT_ENABLE_STOCK_ALERTS: true
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/products/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Inventory Service
  inventory-service:
    build:
      context: ./backend/inventory-service
      dockerfile: Dockerfile
    container_name: smartoutlet-inventory-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smartoutlet_inventory
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: smartoutlet123
      AUTH_SERVICE_URL: http://auth-service:8081
      PRODUCT_SERVICE_URL: http://product-service:8083
      INVENTORY_EXPIRY_WARNING_DAYS: 30
      INVENTORY_EXPIRY_CRITICAL_DAYS: 7
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/api/inventory/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # POS Service
  pos-service:
    build:
      context: ./backend/pos-service
      dockerfile: Dockerfile
    container_name: smartoutlet-pos-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smartoutlet_pos
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: smartoutlet123
      AUTH_SERVICE_URL: http://auth-service:8081
      PRODUCT_SERVICE_URL: http://product-service:8083
      APP_POS_RECEIPT_NUMBER_PREFIX: RCP
      APP_POS_AUTO_PRINT_RECEIPT: false
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/pos/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Expense Service
  expense-service:
    build:
      context: ./backend/expense-service
      dockerfile: Dockerfile
    container_name: smartoutlet-expense-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smartoutlet_expense
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: smartoutlet123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: smartoutlet123
      AUTH_SERVICE_URL: http://auth-service:8081
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/expenses/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: smartoutlet-api-gateway
    restart: unless-stopped
    depends_on:
      auth-service:
        condition: service_healthy
      outlet-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      AUTH_SERVICE_URL: http://auth-service:8081
      OUTLET_SERVICE_URL: http://outlet-service:8082
      PRODUCT_SERVICE_URL: http://product-service:8083
      POS_SERVICE_URL: http://pos-service:8084
      EXPENSE_SERVICE_URL: http://expense-service:8085
    networks:
      - smartoutlet-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: smartoutlet-frontend
    restart: unless-stopped
    depends_on:
      api-gateway:
        condition: service_healthy
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_BASE_URL: http://localhost:8080
      REACT_APP_AUTH_SERVICE_URL: http://localhost:8081
      REACT_APP_OUTLET_SERVICE_URL: http://localhost:8082
      REACT_APP_PRODUCT_SERVICE_URL: http://localhost:8083
      REACT_APP_POS_SERVICE_URL: http://localhost:8084
      REACT_APP_EXPENSE_SERVICE_URL: http://localhost:8085
    networks:
      - smartoutlet-network

  # Kafka UI (Development/Debugging)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: smartoutlet-kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: smartoutlet-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - smartoutlet-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  smartoutlet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16